func <- function(x) {}
func()
func <- function(x) {
return 3
}
func <- function(x) {
return 3
}
square.it <- function(x) {
square <- x * x
return(square)
}
a <- function(x) {}
a <- function(x) {
return x
}
square.it <- function(x) {
square <- x * x
return(square)
}
m <- function(x) { return 3}
m <- function(x) { return x }
square.it <- function(x) {
square <- x * x
return(square)
}
a <- function(x) {
return(x)
}
a(3)
a(6)
for(x = 1; x < 5; x++) {
print(x)
}
for(i in 1:10) {
print(i)
}
log_gamma_loop <- function(n) {
res <- 1
}
log_gamma_loop <- function(n) {
res <- 1
for(i in 1:n) {
res <- res * i
}
return(log(res))
}
print(log_gamma_loop(5))
log_gamma_loop <- function(n) {
res <- 1
for(i in 1:n-1) {
res <- res * i
}
return(log(res))
}
print(log_gamma_loop(5))
log_gamma_loop <- function(n) {
res <- 1
for(i in 1:(n-1)) {
res <- res * i
}
return(log(res))
}
print(log_gamma_loop(5))
#asd
# hello
print(5)
log_gamma_loop <- function(n) {
if(n == 1) {
return 0
}
return(log(res))
}
log(1)
log_gamma_loop <- function(n) {
if(n==1) {}
}
log_gamma_loop <- function(n) {
if(n==2){
return
}
}
print(log_gamma_loop(1))
log_gamma_loop <- function(n) {
if(n==1){
return 0
}
res <- 1
for(i in 1:(n-1)) {
res <- res * i
}
return(log(res))
}
log_gamma_loop <- function(n) {
if(n==1){
return(0)
}
res <- 1
for(i in 1:(n-1)) {
res <- res * i
}
return(log(res))
}
log_gamma_loop <- function(n) {
if(n==1){
return(0)
}
res <- 1
for(i in 1:(n-1)) {
res <- res * i
}
return(log(res))
}
print(log_gamma_loop(1))
print(log_gamma_loop(5))
print(log_gamma_loop(2))
log_gamma_loop <- function(n) {
if(n==1 | n==0){
return(0)
}
res <- 1
for(i in 1:(n-1)) {
res <- res * i
}
return(log(res))
}
print(log_gamma_loop(1))
print(log_gamma_loop(0))
log_gamma_recursive <- function(n) {
if(n==1 | n==0){
return(0)
}
return(log(n-1)+log_gamma_recursive(n-2))
}
print(log_gamma_recursice(0))
print(log_gamma_recursive(0))
print(log_gamma_recursive(5))
log_gamma_recursive <- function(n) {
if(n==1 | n==0){
return(0)
}
return(log(n-1)+log_gamma_recursive(n-1))
}
print(log_gamma_recursive(0))
print(log_gamma_recursive(1))
print(log_gamma_recursive(2))
print(log_gamma_recursive(5))
z <- seq(1, 20, length.out = 20)
x <- array(data = z, dim = c(4, 4))
x
x <- array(data = z, dim = c(4, 5))
x
x <- array(data = z, dim = c(5, 5))
x
x <- array(data = z, dim = c(4, 5))
y <- x[c(1,2), c(1,2)]
y
x <- c(1,2,3,4,5)
plot(x)
plot(x, type="x", color="blue")
plot(x, type="x", col="blue")
plot(x, type="o", col="blue")
setwd('/Users/donnice/Documents/Computer Science/Data Science/R Practicing')
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
names(faithful)
summary(faithful)
names(mpg)
names(faithful)
names(mtcars)
plot(faithful$eruptions,
xlab = "sample number",
ylab = "eruption times (min)",
main = "Old Faithful Eruption Times")
savehistory("~/Documents/Computer Science/Data Science/R Practicing/ch10.Rhistory")
hist(faithful$eruptions,
breaks = 20, # 20 bins
xlab = "eruption times (min)",
ylab = "count",
main = "")
faithful$eruptions
head(faithful$eruptions,10)
waiting
faithful$waiting
qplot(x = faithful$waiting,)
qplot(x = faithful$waiting,
binwidth = 3,
main = "Waiting time to next erupt (min)")
qplot(x = waiting,
binwidth = 3,
main = "Waiting time to next erupt (min)")
qplot(x = waiting,
data = faithful
binwidth = 3,
main = "Waiting time to next erupt (min)")
qplot(x = waiting,
data = faithful,
binwidth = 3,
main = "Waiting time to next erupt (min)")
ggplot(faithful, aes(x = waiting))
ggplot(faithful, aes(x = waiting) +
geom_histogram(bindwidth = 1)
)
ggplot(faithful, aes(x = waiting)) +
geom_histogram(bindwidth = 1)
ggplot(faithful, aes(x = waiting))
ggplot(faithful, aes(x = waiting)) +
geom_histogram(bindwidth = 1)
ggplot(faithful, aes(x = waiting), bins = 20) +
geom_histogram(bindwidth = 1)
ggplot(faithful, aes(x = waiting)) +
geom_histogram(bindwidth = 1, bins = 30)
ggplot(faithful, aes(x = waiting)) +
geom_histogram(bindwidth = 1)
ggplot(faithful, aes(x = waiting)) +
geom_histogram(binwidth = 1)
ggplot(faithful, aes(x = waiting)) +
geom_histogram(binwidth = 10)
ggplot(faithful, aes(x = waiting)) +
geom_histogram(binwidth = 1)
sinc <- function(x) {
return(sin(pi * x) / (pi * x))
}
curve(sinc, -7, 7)
savehistory("~/Documents/Computer Science/Data Science/R Practicing/ch10.Rhistory")
